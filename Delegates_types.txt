// Notes :-
/*
1.Action 2. Func. 3. predicate
    
    These are like a container for a method.
    Instead of writing the same code over nd over again ,
    I put that same code somewhere.
    I just put method(piece of code) into a container.
    
    How to use them ?
    with the use of container's name, whenever i need that code to run.
    
    Delegate -- is nothing but a fancy word for a variable that holds a method.
    
    Type of Delegate :- 
    Action   : Does job But returns void
    Func     : Does job And Always returns an answer.
    Predicate: Cheaks something And gives Yes/No answer. (Return bool value).
    
    
    
    

*/
using System;


public class HelloWorld
{
     //normal method
        static void sayhello(string name){
            Console.WriteLine($"Hello, {name}");
        }
    public static void Main(string[] args)
    {
        //Action
        
        //How to make a Action container
        // Action<> myActionName = MethodName;
        Action<string> myActionName = sayhello;
        
        //Now when ever we use 'myActionName' it will run sayhello method.
        myActionName("Goutam");  // Hello, Goutam
        myActionName("Prateek");  // Hello, Prateek
        
       
        
    }
}
===============================================================
/*
     Lambda way - of using Action - No worry about the revert
*/

using System;


public class HelloWorld
{
      
      
      public static void Main(string [] args){
          //lamda way of using an Action
      // it is usefull when : - 
         // want to tell another part of code. what to do
         // but u don't care about getting an answer back.
         // for ex- sending notifications (real-world example).
      //Action that print star.
      Action<int> drawStar = (size) => 
      {
          for(int i= 0; i<size; i++){
              Console.Write("*");
          }
          Console.WriteLine();
      };
      
      
          
       // Calling the Action   
      drawStar(9);
      drawStar(3);
    }
}
===================================================
/*
     3. Func - do work and return a value.
       // the last type you specify is always the return type.
       
*/

using System;


public class HelloWorld
{
    
      // method that adds two numbers nd returns the answer.
      static int AddNumbers(int a, int b){
          return a + b ;
      }
      
      public static void Main(string [] args){
            
            //How to make Func
            // Func <Input1Type, Input2Type, Input3Type> myFuncName = MethodName;
            Func <int,int,int> adder = AddNumbers;
            int result = adder(1,3);
            Console.WriteLine(result);  // output : 4
    }
}
===============================================
/*
     3. Func - do work and return a value.
       // the last type you specify is always the return type.
       
*/

using System;


public class HelloWorld
{
      public static void Main(string [] args){
            //using lambda 
            //Function that will chk the length of name.
            //took a string and return int value. -- superb - 6 letters.
            Func<string,int> nameLength = (name) => name.Length;
            
        
            int length = nameLength("Superb");  //6 - exact no of char it has - 6
            Console.WriteLine(length);
            
    }
}

UseCase : loading data from a database.
==============================================
/*
    3. predicate : special type of Func
    // It always takes one input nd always returns a bool(true or false).
    // For now , I can say , it is used to test a condition.
    
       
*/

using System;


public class HelloWorld
{
    // normal method - that cheaks if num is even
    static bool iseven(int n){
        return (n % 2 == 0 );
    }
      public static void Main(string [] args){
          
          
          //predicate 
          //How to make one:
          //Predicate<InputType> myPredicateName = MethodName;
          Predicate<int> findEven = iseven;
          
          bool ans = findEven(4);
          Console.WriteLine("Is 4 even?" + ans);
          
          ans = findEven(7);
          Console.WriteLine("Is 7 even?" + ans);
          
    }
}
====================================================

using System;


public class HelloWorld
{
    
    public static void Main(string [] args){
        
         // Predicate that chks if a fruit name has a long length (>5)
    //Predicate<InputType> myPredicateName = MethodName;

    Predicate<string> isLongFruit = (fruit) => {
        return fruit.Length > 5 ;  // explicit return is must when using curly braces.
    };
    
    Console.WriteLine(isLongFruit("Apple"));  // False 5 not > 5
    Console.WriteLine(isLongFruit("Orange"));  // True 6 > 5
          
    }
  
}


=================================================
/*
   Important Usecase : The FindAll Method.
   FindAll method in a list uses a Predicate to find all items that meets the condition.
       
*/

using System;
using System.Collections.Generic;

public class HelloWorld
{
    
    public static void Main(string [] args){
        
        List<string> fruits = new List<string> {"Apple","Banana","Cherry"};
        
  

        
        Predicate<string> isLongFruit = (fruit) => fruit.Length > 5;
        
        
        // FindAll ek aisa method hai jo list ke andar har item ko check karta hai apne "rule" (predicate) ke against. Jo bhi item us rule ko follow karta hai, usey nayi list mein daal deta hai. Aakhir mein, woh nayi list return kar deta hai.
        List<string> longFruits = fruits.FindAll(isLongFruit);
        
        foreach(string fruit in longFruits)
        {
            Console.WriteLine(fruit); // o/p :- Banana , Cherry.
        }
       
          
    }
  
}
==========================================================================